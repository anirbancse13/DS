//https://leetcode.com/problems/sqrtx/
69. Sqrt(x)

class Solution {
    public int mySqrt(int x) {
        if (x==1) return 1;
        int start = 0;
        int end = x;
        long mid = start+((end-start))/2;
        int temp =0;
        while(start<=end){
            long sqrt= mid*mid;
            if (sqrt == x) return (int)mid;
            if (sqrt < x){
                temp = (int)mid;
                start = (int)(mid+1);
            }else{
                end = (int)(mid-1);
            }
            mid = start+((end-start))/2;
        }
        return temp;
    }
}


//With decimal precision

package leetcode;

class Solution {
    public static int mySqrtInteger(int x) {
        if (x == 1) return 1;
        int start = 0;
        int end = x;
        long mid = start + ((end - start)) / 2;
        int temp = 0;
        while (start <= end) {
            long sqrt = mid * mid;
            if (sqrt == x) return (int) mid;
            if (sqrt < x) {
                temp = (int) mid;
                start = (int) (mid + 1);
            } else {
                end = (int) (mid - 1);
            }
            mid = start + ((end - start)) / 2;
        }
        return temp;
    }

    private static double decimalPrecision(int target, int precision, int tempSol) {
        double ans = tempSol;
        double factor = 1;
        for (int i = 0; i < precision; i++) {
            factor= factor / 10;
            for (double j = ans; j * j < target; j = j + factor) {
                ans = j;
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        int target = 37;
        int precision = 3;
        int tempSol = mySqrtInteger(target);
        System.out.println("Sqrt of " + target + " with precision " + precision + " is: " + String.format("%."+precision+"f",decimalPrecision(target, precision, tempSol)));
    }


}
