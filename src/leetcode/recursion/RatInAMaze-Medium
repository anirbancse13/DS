https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1
Rat in a Maze Problem - I

import java.util.*;
class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            Solution obj = new Solution();
            ArrayList<String> res = obj.findPath(a, n);
            Collections.sort(res);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++)
                    System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

// m is the given matrix and n is the order of matrix
class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        //Starting point
        int srcx=0;
        int srcy=0;
        
        //Stores the possible answers
        ArrayList<String> ans = new ArrayList<>();
        //Stores one answer
        StringBuilder path = new StringBuilder();
        //Keep track of visited co-ordinates for a particular path
        int[][] visited = new int[n][n];
        
        //Check if the starting co-ordinate is not a valid path
        if(m[srcx][srcy] == 0)
            return ans;
        
        //Adds possible solutions to the ans 
        solve(m,n,ans,path,visited,srcx,srcy);
        
        //Return the ans with all possible solutions
        return ans;
    }
    
    private static boolean isPossible(int x, int y, int n, int[][] m, int[][] visited){
        //For a path to be valid
        //  1. x and y should be inside the matrix
        //  2. input matrix x,y cordinate should have value 1
        //  3. visited matrix x,y co-ordinate should not be marked as 1
        if((x>=0 && x<=n-1) && (y>=0 && y<=n-1) && m[x][y] == 1 && visited[x][y] == 0){
            return true;
        }
        return false;
    }
    
    private static void solve(int[][] m, int n, ArrayList<String> ans, StringBuilder path, int[][] visited, int x, int y){
        //Base condition
        if(x==n-1 && y==n-1){
            ans.add(path.toString());
            return;
        }
        
        //Marking the visited mtrix for the current x & y co-ordinates
        visited[x][y] = 1;
        
        //Go down from the current position (x+1,y)
        if(isPossible(x+1,y,n,m,visited)){
            //If path is possible add the path value to the possible solution
            path.append("D");
            
            //solve recursively from the current path
            solve(m,n,ans,path,visited,x+1,y);
            
            //After the current path is solved remove the path value for backtracking
            int lastIndex = path.lastIndexOf("D");
            path.deleteCharAt(lastIndex);
            
        }
        
        //Go left from the current position (x,y-1)
        if(isPossible(x,y-1,n,m,visited)){
            path.append("L");
            
            solve(m,n,ans,path,visited,x,y-1);
            
            int lastIndex = path.lastIndexOf("L");
            path.deleteCharAt(lastIndex);
        }
        
        //Go right from the current position (x,y+1)
        if(isPossible(x,y+1,n,m,visited)){
            path.append("R");
            
            solve(m,n,ans,path,visited,x,y+1);
            
            int lastIndex = path.lastIndexOf("R");
            path.deleteCharAt(lastIndex);
        }
        
        //Go up from the current position (x-1,y)
        if(isPossible(x-1,y,n,m,visited)){
            path.append("U");
            
            solve(m,n,ans,path,visited,x-1,y);
            
            int lastIndex = path.lastIndexOf("U");
            path.deleteCharAt(lastIndex);
        }
        
        //Once the whole souce to destination for one path is covered, backtrack the visited matrix for next set of moves
        visited[x][y]=0;
        
    }
}