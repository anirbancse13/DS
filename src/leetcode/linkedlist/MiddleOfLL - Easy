https://leetcode.com/problems/middle-of-the-linked-list/
876. Middle of the Linked List

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode curr = head;

        int length = 0;
        while(curr != null){
            curr = curr.next;
            length++;
        }

        int mid = (length/2)+1;

        curr = head;

        int count =1;
        while(count!=mid){
            curr = curr.next;
            count++;
        }

        return curr;

    }
}

//Using fast and slow pointers

class Solution {
    public ListNode middleNode(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }

        ListNode fast = head;
        ListNode slow = head;



        while(fast.next != null && fast.next.next != null){
            System.out.println(fast.next.next.val);
            fast=fast.next.next;
            slow=slow.next;
        }

        if(fast.next == null)
            return slow;
        else
            return slow.next;

    }
}