https://leetcode.com/problems/min-stack/
155. Min Stack

//Did not pass all test cases

class MinStack {

    Stack<Integer> stack;
    int min;
    public MinStack() {
        stack = new Stack<>();
        min = Integer.MAX_VALUE;
    }

    public void push(int val) {
        //For first value insert normally
        if(stack.isEmpty()){
            stack.push(val);
            min = Math.min(min, val);
            return;
        }

        //When stack is not empty
        if(val > min){
            //Normal push
            stack.push(val);
        }else{
            //Special push
            stack.push(2*val-min);
            min = val;
        }
    }

    public void pop() {
        //Nothing to return if stack is empty
        if(stack.isEmpty()){
            return;
        }

        if(stack.peek() > min){
            //Normal pop
            stack.pop();
        }else{
            //Special pop
            // Actual stack element to be popped
            int prevMin = min;
            min = 2*min - stack.peek();
            stack.pop();
        }
    }

    public int top() {
        if(stack.isEmpty()){
            return -1;
        }

        if(stack.peek()>min){
            return stack.peek();
        }else{
            return min;
        }
    }

    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */